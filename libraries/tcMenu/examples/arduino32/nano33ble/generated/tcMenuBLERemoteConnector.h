/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI DESIGNER
    INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE FILE.

    All the variables you may need access to are marked extern in this file for easy
    use elsewhere.
 */

#ifndef TCMENU_BLEREMOTECONNECTOR_H
#define TCMENU_BLEREMOTECONNECTOR_H

#include <PlatformDetermination.h>
#include <RemoteTypes.h>
#include <RemoteConnector.h>
#include <MessageProcessors.h>
#include <ArduinoBLE.h>
#include <remote/BaseRemoteComponents.h>
#include <remote/BaseBufferedRemoteTransport.h>

#ifndef LARGEST_PROCESSABLE_MSG
#define LARGEST_PROCESSABLE_MSG 512
#endif

extern const PROGMEM ConnectorLocalInfo applicationInfo;

namespace tcremote {

    const char bleServiceIdentifier[] PROGMEM = "8589F957-1916-4B27-BA6D-B0AF36F317EF";
    const char characteristicApiToDevice[] PROGMEM = "7E7CA4D5-CF52-4918-BD60-6E98A810F0EB";
    const char characteristicDeviceToApi[] PROGMEM = "D361F4F9-B13D-4118-A6C4-B54CF12EED3C";
    const char characteristicApiSeqCounter[] PROGMEM = "AB2ED3BE-C8C4-4E0D-8BF9-E7D6717F761C";
    const char characteristicDeviceSeqCounter[] PROGMEM = "79A24791-EEDA-4DA5-9E8C-04B8C9060B1F";

    extern BLEDevice central;
    extern BLEService bleApiService;
    extern BLECharacteristic toApiCharacteristic;
    extern BLECharacteristic fromApiCharacteristic;
    extern BLECharacteristic deviceSequenceCharacteristic;
    extern BLECharacteristic apiSequenceCharacteristic;

    class BLEDeviceInitialisation : public DeviceInitialisation {
    public:
        BLEDeviceInitialisation() = default;
        bool attemptInitialisation() override;
        bool attemptNewConnection(BaseRemoteServerConnection *connection) override;
    };

    enum TcConnectionStateType { BLE_CON_DISCONNECTED, BLE_CON_BUILDING_MSG, BLE_CON_SENDING_MSG, BLE_CON_AWAITING_ACK};

    class BLETagValTransport : public BaseBufferedRemoteTransport {
    private:
        uint32_t currDeviceSequence;
        uint32_t currApiSequence;
    public:
        BLETagValTransport();
        int fillReadBuffer(uint8_t* dataBuffer, int maxSize) override;
        bool readAvailable() override;
        void flush() override;
        bool available() override;
        bool connected() override;
        void connectedClient();
    };
}

#endif //TCMENU_BLEREMOTECONNECTOR_H
